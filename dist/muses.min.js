!function e(t,n,i){function o(s,r){if(!n[s]){if(!t[s]){var d="function"==typeof require&&require;if(!r&&d)return d(s,!0);if(u)return u(s,!0);var a=new Error("Cannot find module '"+s+"'");throw a.code="MODULE_NOT_FOUND",a}var c=n[s]={exports:{}};t[s][0].call(c.exports,(function(e){return o(t[s][1][e]||e)}),c,c.exports,e,t,n,i)}return n[s].exports}for(var u="function"==typeof require&&require,s=0;s<i.length;s++)o(i[s]);return o}({1:[function(e,t,n){"use strict";var i={};t.exports=function(e){if("undefined"==typeof window)return null;var t=window.OfflineAudioContext||window.webkitOfflineAudioContext,n=window.AudioContext||window.webkitAudioContext;if(!n)return null;"number"==typeof e&&(e={sampleRate:e});var o=e&&e.sampleRate;if(e&&e.offline)return t?new t(e.channels||2,e.length,o||44100):null;var u=i[o];if(u)return u;try{u=new n(e)}catch(e){u=new n}return i[u.sampleRate]=i[o]=u,u}},{}],2:[function(e,t,n){var i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};!function(i){if("object"==typeof t&&"object"==typeof t.exports){var o=i(e,n);void 0!==o&&(t.exports=o)}else"function"==typeof define&&define.amd&&define(["require","exports","audio-context"],i)}((function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getAudioContext=t.getMicStreamNode=t.AudioTrack=t.AudioChannel=t.createAudioMixer=t.AudioMixer=void 0;const n=i(e("audio-context"));class o{constructor(e){this.channels=[],this.ctx=e||(0,n.default)(),this.inputNode=this.ctx.createGain(),this.inputNode.connect(this.ctx.destination)}addChannel(e){const t=new s(this);return t.id=e||this.channels.length.toString(),this.channels.push(t),t}getChannel(e){const t=this.channels.findIndex((t=>t.id===e));return this.channels[t]||null}set volume(e){this.inputNode.gain.value=e}get volume(){return this.inputNode.gain.value}}function u(e){return void 0===e&&(e=(0,n.default)()),new o(e)}t.AudioMixer=o,t.createAudioMixer=u;class s{constructor(e){this.tracks=[],this.customNodes=[],this.id="N/A",this.mixer=e;const t=this.mixer.ctx;this.inputNode=new GainNode(t,{gain:1}),this.outputNode=new GainNode(t,{gain:1}),this.gainNode=new GainNode(t,{gain:1}),this.stereoPannerNode=new StereoPannerNode(t,{pan:0}),this.LowEQNode=new BiquadFilterNode(t,{type:"lowshelf",Q:1,gain:0}),this.MidEQNode=new BiquadFilterNode(t,{type:"peaking",Q:1,gain:0}),this.HighEQNode=new BiquadFilterNode(t,{type:"highshelf",Q:1,gain:0}),this.inputNode.connect(this.LowEQNode).connect(this.MidEQNode).connect(this.HighEQNode).connect(this.stereoPannerNode).connect(this.gainNode).connect(this.outputNode).connect(e.inputNode)}addNode(e){this.customNodes.push(e),this.reconnectNodes()}removeNode(e){const t=this.customNodes.findIndex((t=>t===e));if(-1===t)throw new Error("Can't find out the provided customNode in the channel's customNodes list.");this.customNodes.splice(t,1),this.reconnectNodes()}removeAllNodes(){this.customNodes.splice(0,this.customNodes.length),this.reconnectNodes()}reconnectNodes(){this.volume=0,this.outputNode.disconnect();try{if(this.customNodes.length<=0)this.outputNode.connect(this.mixer.inputNode);else{const t=this.customNodes.length;for(var e=0;e<t;e++)this.customNodes[e].disconnect(),this.customNodes[e].connect(e>=t-1?this.mixer.inputNode:this.customNodes[e+1]);this.outputNode.connect(this.customNodes[0])}}catch(e){throw console.error("CHANNEL_RECONNECT:NODES_eRROR ~>",e),this.outputNode.disconnect(),this.outputNode.connect(this.mixer.inputNode),e}finally{this.volume=1}}disconnectFromContext(){return this.outputNode.disconnect(this.mixer.ctx.destination),this}connectToContext(){return this.outputNode.connect(this.mixer.ctx.destination),this.mixer.ctx}connect(e){this.outputNode.connect(e)}disconnect(e){void 0!==e?this.outputNode.disconnect(e):this.outputNode.disconnect()}addTrack(e){return e.output(this),this}input(e){if(e instanceof MediaStreamAudioSourceNode||e instanceof MediaElementAudioSourceNode)return e.connect(this.inputNode);if(e instanceof r)return this.addTrack(e),e;const t=new r(e,this.mixer.ctx);return this.addTrack(t),t}set pan(e){this.stereoPannerNode.pan.value=e}get pan(){return this.stereoPannerNode.pan.value}set volume(e){this.gainNode.gain.value=e}get volume(){return this.gainNode.gain.value}set lowEQ(e){this.LowEQNode.gain.value=e}get lowEQ(){return this.LowEQNode.gain.value}set midEQ(e){this.MidEQNode.gain.value=e}get midEQ(){return this.MidEQNode.gain.value}set highEQ(e){this.HighEQNode.gain.value=e}get highEQ(){return this.HighEQNode.gain.value}set muted(e){this.outputNode.gain.value=!0===e?0:1}get muted(){return!(this.outputNode.gain.value>0)}fadeOut(e=2e3){const t=this;return"number"!=typeof e&&(e=2e3),new Promise(((n,i)=>{const o=2/e*10,u=setInterval((()=>{if(t.inputNode.gain.value<=0)return t.inputNode.gain.value=0,clearInterval(u),n(!0);t.inputNode.gain.value-=o}),2)}))}fadeIn(e=2e3){const t=this;return"number"!=typeof e&&(e=2e3),new Promise(((n,i)=>{const o=2/e*10,u=setInterval((()=>{if(t.inputNode.gain.value>=1)return t.inputNode.gain.value=1,clearInterval(u),n(!0);t.inputNode.gain.value+=o}),2)}))}}t.AudioChannel=s;class r{constructor(e,t){if("string"==typeof e){const t=document.createElement("audio");t.src=e,t.controls=!1,t.volume=1,t.load(),e=t}this.audioElement=e,this.sourceNode=t.createMediaElementSource(this.audioElement),this.sourceNode.disconnect()}output(e){if(-1!==e.tracks.findIndex((e=>e===this)))return!0;this.sourceNode.disconnect(),this.sourceNode.connect(e.inputNode),e.tracks.push(this)}set volume(e){this.audioElement.volume=e}get volume(){return this.audioElement.volume}set loop(e){this.audioElement.loop=e}get loop(){return this.audioElement.loop}set muted(e){this.audioElement.muted=e}get muted(){return this.audioElement.muted}set time(e){this.audioElement.currentTime=e}get time(){return this.audioElement.currentTime}play(){return this.audioElement.play()}get playing(){return!this.audioElement.paused}get paused(){return this.audioElement.paused}pause(){return this.audioElement.pause()}stop(){return this.audioElement.pause(),this.audioElement.currentTime=0}}function d(){return new Promise(((e,t)=>{navigator.mediaDevices.getUserMedia({video:!1,audio:!0}).then((function(t){const i=(0,n.default)().createMediaStreamSource(t);return e(i)})).catch((e=>{t(e)}))}))}function a(){return(0,n.default)()}t.AudioTrack=r,t.getMicStreamNode=d,t.getAudioContext=a,"object"==typeof window&&(window.muses={AudioMixer:o,AudioChannel:s,AudioTrack:r,createAudioMixer:u,getMicStreamNode:d,getAudioContext:a})}))},{"audio-context":1}]},{},[2]);
